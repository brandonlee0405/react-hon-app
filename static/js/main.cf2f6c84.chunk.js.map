{"version":3,"sources":["img/hon-header.jpg","components/layout/SignedInLinks.js","components/layout/SignedOutLinks.js","components/layout/Navbar.js","components/auth/SignIn.js","components/layout/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SignedInLinks","className","to","SignedOutLinks","Navbar","SignIn","handleChange","console","log","getEmailAndId","document","getElementById","value","noValidate","autoComplete","TextField","id","label","onChange","this","variant","fullWidth","type","Button","onClick","href","Component","Homepage","src","headerImage","alt","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,wC,sMCqB5BC,EAlBO,WACpB,OACE,wBAAIC,UAAU,SACZ,4BAIE,kBAAC,IAAD,CAASC,GAAG,KAAZ,YAEF,4BACE,kBAAC,IAAD,CAASA,GAAG,IAAID,UAAU,kCAA1B,SCAOE,EAVQ,WACrB,OACE,wBAAIF,UAAU,SACZ,4BACE,kBAAC,IAAD,CAASC,GAAG,WAAZ,cCYOE,EAdA,WACb,OACE,yBAAKH,UAAU,6BACb,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,cAAvB,qBAGA,kBAAC,EAAD,MACA,kBAAC,EAAD,S,gDC2COI,G,kNAlDbC,aAAe,WACbC,QAAQC,IAAI,iC,EAGdC,cAAgB,WACdF,QAAQC,IAAR,oBACeE,SAASC,eAAe,SAASC,MADhD,uBAEIF,SAASC,eAAe,aAAaC,S,uDAMzC,OACE,yBAAKX,UAAU,qBACb,wBAAIA,UAAU,kBAAd,WACA,0BAAMA,UAAU,cAAcY,YAAU,EAACC,aAAa,OACpD,yBAAKb,UAAU,uBACb,kBAACc,EAAA,EAAD,CACEC,GAAG,QACHC,MAAM,gBACNC,SAAUC,KAAKb,aACfc,QAAQ,WACRC,UAAU,SAEZ,6BACA,6BACA,kBAACN,EAAA,EAAD,CACEC,GAAG,YACHC,MAAM,WACNC,SAAUC,KAAKb,aACfgB,KAAK,WACLF,QAAQ,WACRC,UAAU,SAEZ,8BAEF,kBAACE,EAAA,EAAD,CAAQH,QAAQ,WAAWI,QAASL,KAAKV,eAAzC,UAGA,6BACA,uBAAGgB,KAAK,sBAAR,8C,GA1CWC,c,iBCiBNC,E,uKAhBX,OACE,yBAAK1B,UAAU,aACb,yBAAK2B,IAAKC,IAAaC,IAAI,SAAS7B,UAAU,WAC9C,0BAAMA,UAAU,cAAcY,YAAU,EAACC,aAAa,OACpD,kBAACC,EAAA,EAAD,CACEC,GAAG,oBACHC,MAAM,oBACNC,SAAUC,KAAKb,aACfe,UAAU,e,GAVCK,a,MCeRK,MAZf,WACE,OACE,yBAAK9B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+B,OAAK,EAACC,KAAK,IAAIC,UAAWP,IACjC,kBAAC,IAAD,CAAOM,KAAK,UAAUC,UAAW7B,OCDrB8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEF/B,SAASC,eAAe,SDwHpB,kBAAmB+B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.cf2f6c84.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hon-header.6187ebaf.jpg\";","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst SignedInLinks = () => {\r\n  return (\r\n    <ul className=\"right\">\r\n      <li>\r\n        {\r\n          // TODO: Need to complete when setting up authentication\r\n        }\r\n        <NavLink to=\"/\">Log Out</NavLink>\r\n      </li>\r\n      <li>\r\n        <NavLink to=\"/\" className=\"btn btn-floating red lighten-2\">\r\n          BL\r\n        </NavLink>\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default SignedInLinks;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst SignedOutLinks = () => {\r\n  return (\r\n    <ul className=\"right\">\r\n      <li>\r\n        <NavLink to=\"/signin\">Sign In</NavLink>\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default SignedOutLinks;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport SignedInLinks from './SignedInLinks';\r\nimport SignedOutLinks from './SignedOutLinks';\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav className=\"nav-wrapper grey darken-3\">\r\n      <div className=\"container\">\r\n        <Link to=\"/\" className=\"brand-logo\">\r\n          Heroes Of Newerth\r\n        </Link>\r\n        <SignedOutLinks />\r\n        <SignedInLinks />\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport '../../design/SignInStylesheet.css';\r\n\r\nclass SignIn extends Component {\r\n  handleChange = () => {\r\n    console.log('Username or password edited.');\r\n  };\r\n\r\n  getEmailAndId = () => {\r\n    console.log(\r\n      `Username: ${document.getElementById('email').value}, Password: ${\r\n        document.getElementById('user-pass').value\r\n      }`\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"sign-in-container\">\r\n        <h5 className=\"sign-in-header\">Sign In</h5>\r\n        <form className=\"input-field\" noValidate autoComplete=\"off\">\r\n          <div className=\"textfield-container\">\r\n            <TextField\r\n              id=\"email\"\r\n              label=\"Email Address\"\r\n              onChange={this.handleChange}\r\n              variant=\"outlined\"\r\n              fullWidth=\"true\"\r\n            />\r\n            <br />\r\n            <br />\r\n            <TextField\r\n              id=\"user-pass\"\r\n              label=\"Password\"\r\n              onChange={this.handleChange}\r\n              type=\"password\"\r\n              variant=\"outlined\"\r\n              fullWidth=\"true\"\r\n            />\r\n            <br />\r\n          </div>\r\n          <Button variant=\"outlined\" onClick={this.getEmailAndId}>\r\n            Log In\r\n          </Button>\r\n          <br />\r\n          <a href=\"../layout/Homepage\">\r\n            Don&#39;t have an account? Sign up here.\r\n          </a>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SignIn;\r\n","import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport headerImage from '../../img/hon-header.jpg';\r\n\r\nclass Homepage extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <img src={headerImage} alt=\"header\" className=\"center\" />\r\n        <form className=\"input-field\" noValidate autoComplete=\"off\">\r\n          <TextField\r\n            id=\"standard-required\"\r\n            label=\"Search A Username\"\r\n            onChange={this.handleChange}\r\n            fullWidth=\"true\"\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Homepage;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Navbar from './components/layout/Navbar';\r\nimport SignIn from './components/auth/SignIn';\r\nimport Homepage from './components/layout/Homepage';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Navbar />\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Homepage} />\r\n        <Route path=\"/signin\" component={SignIn} />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}